/**********************************************************/
/* This is the example convert Excel format to LDF format */
/**********************************************************/

LIN_description_file;
LIN_protocol_version = "2.1";
LIN_language_version = "2.1";
LIN_speed = 19.2 kbps;

Nodes {
	Master: VectorMasterNode, 1 ms, 0.1ms;
	Slaves: VectorSlave2_1, VectorSlave2_0;
}

Signals {
	signal1: 16, 16, VectorMasterNode, VectorSlave2_1;
	signal1_2: 16, 16, VectorMasterNode, VectorSlave2_0;
	sig_MotorQuery1: 40, {5, 4, 3, 2, 1}, VectorMasterNode, VectorSlave2_1;
	sig_MotorQuery1_2: 8, 5, VectorMasterNode, VectorSlave2_0;
	MotorTemp: 8, 0, VectorSlave2_1, VectorMasterNode;
	MotorLinError: 1, 0, VectorSlave2_1, VectorMasterNode;
	MotorTemp_2: 8, 0, VectorSlave2_0, VectorMasterNode;
	MotorLinError_2: 1, 0, VectorSlave2_0, VectorMasterNode;
	sigMotorState1: 8, 0, VectorSlave2_1, VectorMasterNode;
	sigMotorState1_2: 8, 0, VectorSlave2_0, VectorMasterNode;
}

Frames {
	MotorControl: 4, VectorMasterNode, 8 {
		signal1, 16;
	}
	MotorControl_2: 6, VectorMasterNode, 8 {
		signal1_2, 16;
	}
	MotorQuery: 5, VectorMasterNode, 5 {
		sig_MotorQuery1, 0;
	}
	MotorQuery_2: 7, VectorMasterNode, 5 {
		sig_MotorQuery1_2, 0;
	}
	MotorState_Cycl: 0, VectorSlave2_1, 8 {
		MotorTemp, 8;
		MotorLinError, 40;
	}
	MotorState_Cycl_2: 1, VectorSlave2_0, 8 {
		MotorTemp_2, 8;
		MotorLinError_2, 40;
	}
	MotorState_Event: 2, VectorSlave2_1, 3 {
		sigMotorState1, 8;
	}
	MotorState_Event_2: 3, VectorSlave2_0, 3 {
		sigMotorState1_2, 8;
	}
}

Event_triggered_frames {
	ETF_MotorState_Event : CollisionResolver2, 0x38, MotorState_Event, MotorState_Event_2;
}

Node_attributes {
	VectorSlave2_1 {
		LIN_protocol = "2.1";
		configured_NAD = 5;
		initial_NAD = 0x05;
		product_id = 0x001e, 2, 1;
		response_error = MotorLinError;
		P2_min = 0 ms;
		ST_min = 0 ms;
		configurable_frames {
			MotorControl;
			MotorQuery;
			MotorState_Cycl;
			MotorState_Event;
			ETF_MotorState_Event;
		}
	}
	VectorSlave2_0 {
		LIN_protocol = "2.0";
		configured_NAD = 1;
		product_id = 0x001e, 1, 0;
		response_error = MotorLinError_2;
		P2_min = 50 ms;
		ST_min = 0 ms;
		configurable_frames {
			MotorControl_2 = 0x1234;
			MotorQuery_2 = 0x1999;
			MotorState_Cycl_2 = 0x2222;
			MotorState_Event_2 = 0x2333;
			ETF_MotorState_Event = 0x4444;
		}
	}
}

Schedule_tables {
	InitTable {
		MotorQuery delay 7 ms;
		MotorQuery_2 delay 7 ms;
		MotorControl_2 delay 10 ms;
		MotorControl delay 10 ms;
		MotorState_Cycl delay 10 ms;
		MotorState_Cycl_2 delay 10 ms;
		MotorState_Event delay 6 ms;
		MotorState_Event_2 delay 6 ms;
	}
	ETF_Table {
		ETF_MotorState_Event delay 20 ms;
	}
	CollisionResolver2 {
		MotorState_Event delay 10 ms;
		MotorState_Event_2 delay 10 ms;
	}
	Table4 {
		AssignNAD {VectorSlave2_1} delay 10 ms;
		SlaveResp delay 10 ms;
	}
}

Signal_encoding_types {
	encoding1 {
		physical_value, 0, 200, 1.0, 0.0, "temperature";
		logical_value, 255, "invalid";
	}
	encTemperature {
		physical_value, 0, 200, 0.5, -20.0, "Degree";
	}
	encError {
		logical_value, 0, "NoError";
		logical_value, 1, "ResponseError";
	}
	encState {
		physical_value, 0, 200, 0.5, -20.0, "";
	}
}

Signal_representation {
	encoding1: signal1;
	encTemperature: MotorTemp;
	encError: MotorLinError;
	encState: sigMotorState1;
}
